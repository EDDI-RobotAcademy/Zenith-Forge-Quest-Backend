name: Deploy

on:
  push:
    branches:
      - main

env:
  DOCKER_IMAGE: ghcr.io/eddi-robotacademy/zenith-forge-quest-backend/team-project-backend
  VERSION: ${{ github.sha }}
  NAME: team-project-backend

jobs:
  build:
      name: Build
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v3
        - name: Set up JDK 17
          uses: actions/setup-java@v3
          with:
            java-version: '17'
            distribution: 'zulu' # https://github.com/actions/setup-java

        #- name: Gradle Caching
        #  uses: actions/cache@v3
        #  with:
        #    path: |
        #      ~/.gradle/caches
        #      ~/.gradle/wrapper
        #    key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        #    restore-keys: |
        #      ${{ runner.os }}-gradle-
              
        - name: create application.properties for CD
          run: |
            mkdir -p src/main/resources
            cd src/main/resources
            echo "${{ secrets.DEPLOY_APPLICATION_PROPERTIES }}" > application.properties
            echo "${{ secrets.DEPLOY_MYSQL_PROPERTIES }}" >> application.properties
            echo "${{ secrets.DEPLOY_CORS_PROPERTIES }}" >> application.properties

        - name: Grant Permission to gradlew
          run: chmod +x gradlew

        - name: Build with Gradle
          run: ./gradlew clean build -x test

        - name: Docker build & push to prod
          run: |
              docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GHCR_TOKEN }}
              docker buildx create --name arm64builder --use
              docker buildx build --platform linux/amd64,linux/arm64 -f Dockerfile -t ghcr.io/eddi-robotacademy/zenith-forge-quest-backend/team-project-backend:latest --push .
              docker logout

  deploy:
    name: Deploy
    needs: build
    runs-on: [ self-hosted, deploy-zenith-forge-quest-backend ]
    steps:
      - name: Get GitHub Actions IP
        id: ip
        uses: haythem/public-ip@v1.2
  
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2
            
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Add Github Actions IP to Security group
        run: |
          aws ec2 authorize-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32

      - name: Deploy to prod
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.PUBLIC_IP }}
          username: ec2-user
          key: ${{ secrets.PRIVATE_KEY }}
          port: 22
          script_stop: true
          script: |
            pwd
            ls -al
            cd cafe-java-spring-backend
            pwd

            if [[ "$(docker ps -q --filter ancestor=mysql:8.0)" ]]; then
              docker rm -f $(docker ps -qa --filter ancestor=mysql:8.0)
            fi
            echo "pass mysql-container"
  
            docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GHCR_TOKEN }}

            docker pull ghcr.io/eddi-robotacademy/zenith-forge-quest-backend/team-project-backend:latest

            docker image prune -f
            docker logout
            docker-compose up -d

      - name: Remove Github Actions IP From Security Group
        run: |
          aws ec2 revoke-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
